{"meta":{"title":"Reus's Blog","subtitle":"Code","description":"努力努力在努力","author":"pzh.","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-06-07T16:20:17.000Z","updated":"2022-06-07T16:20:55.226Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"CMU课程-Storage I(存储 I)","slug":"CMU课程-Storage-I-存储-I","date":"2022-06-07T07:27:59.000Z","updated":"2022-06-07T07:36:52.031Z","comments":true,"path":"2022/06/07/CMU课程-Storage-I-存储-I/","link":"","permalink":"http://example.com/2022/06/07/CMU%E8%AF%BE%E7%A8%8B-Storage-I-%E5%AD%98%E5%82%A8-I/","excerpt":"","text":"存储Overview 非易失性存储 随机存取 字节编址 易失性存储 顺序存储 按照块编址，读的时候必须整个块读进去然后进行解析，修改某一个字节的内容然后重新将整个块写进去。 在本门课程中，内存代指DRAM，磁盘只带SSD，HDD或者网络存储。 随机存取 V.S 随机存取DBMS希望最大化顺序存取。 算法尝试减少对随机页的写入次数，以便于数据可以存储在连续的块中 Disk-oriented DBMS （面向硬盘的数据库管理系统）大部分的数据库都是面向硬盘的数据库，对于面向内存的数据库：速度非常快，但是容易丢失，比如Redis。 上图是面向磁盘的DBMS示意图，数据被组织成页或者块（Page），第一页是目录页，储存在Disk中，这里假设内存是空的，为了对数据进行操作，首先需要将数据读取到内存中，通过Buffer pool来限定内存的大小，同时数据库会通过一个执行引擎（Execution Engine）来进行查询，执行引擎向数据库发送请求特定的Page，内存从Disk中先读取Directory，然后通过Directory找到对应的Page，再从Disk中读取相应的Page放入内存中。 虚拟内存 为什么数据库需要自己管理内存而不是让操作系统来帮忙呢？ 实现虚拟内存的一种方法是使用mmap()，通过这种方法可以将文件的内容映射到进程的地址空间，进程在地址空间上读取，操作系统负责在磁盘和内存之间来回移动页面。如果mmap遇到page fault，那么进程会被阻塞。 mmap的另一个问题在于，对于只读的文件是友好的，但是当存在多个写者时，就变得相当复杂。存在一些方法可以解决这些问题。总的来说就是告诉OS，虚拟内存中有哪些可以卸载了，哪些不能卸载。 总的来说，我们希望数据库能够自己管理自己的内容。 使用正确的顺序将脏页写回 预先取出磁盘的数据 缓冲池的替换策略 线程&#x2F;进程安排 💡 OS is not your friend ！ Database storage(数据库存储)两大关键问题 数据库中的数据在磁盘上是怎么表现的（静态的表现） File storage（文件存储） DBMS将一个数据库作为一个或者多个文件存储在磁盘上，通常在一个专有的格式中。OS并不知道文件的具体内容。 Storge Manager Storge Manager负责维护数据库的文件。 → 一些存储管理器能够自己调度读写操作，以改善页面的时空局部性。 将文件组织成页面的集合。 Page layout（页面布局） Page是一个固定大小的数据块。 每个页有固定的ID 有不同的解释 Tuple layout（元组布局） 如何管理数据从磁盘与内存之间的进出（动态的调度）","categories":[],"tags":[]},{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2022-06-07T01:23:19.000Z","updated":"2022-06-07T02:22:16.975Z","comments":true,"path":"2022/06/07/Markdown基本语法/","link":"","permalink":"http://example.com/2022/06/07/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown标题语法 一级标题： # heading level1 二级标题： ## heading level2 以此类推 Markdown段落语法要创建段落，使用空白行将一行或者多行文本进行分隔。 Markdown换行语法在一行的末尾添加两个或者多个空格，然后按回车键即可创建一个换行。 Markdown强调语法粗体（Bold）前后各加两个星号** 斜体（Italic）用来斜体显示文本，在文本后添加一个星号* 组合：Bold和Italic混合前后各三个*** Markdown引用语法创建块引用，在段落前添加一个 &gt; Markdown列表语法可以将多个条目组织成有序或者无序列表 有序列表 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。 a 无序列表 要创建无序列表，请在每个列表项前面添加破折号、星号、或者加号。 first 啊 Markdown代码语法要将单词或短语表示为代码，将其包裹在反引号中（&#96;&#96;） 转义反引号将代码的单词或者短语中包含一个或者多个反引号，可以通过将单词或者短语包裹在双反引号中。 反引号：tab键上面的键 Markdown分割线语法要创建分割线，请在单独一行使用多个破折号。 Markdown链接语法超链接显示名 可以使用尖括号将URL或者email地址变成可点击的 强调链接，在链接语法前后加* 将链接表示为代码，在方括号中添加反引号","categories":[],"tags":[{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-06-06T03:33:19.337Z","updated":"2022-06-06T03:33:19.337Z","comments":true,"path":"2022/06/06/hello-world/","link":"","permalink":"http://example.com/2022/06/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]}